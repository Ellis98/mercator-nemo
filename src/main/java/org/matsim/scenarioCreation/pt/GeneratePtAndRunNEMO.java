/* *********************************************************************** *
 * project: org.matsim.*
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2017 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.scenarioCreation.pt;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.matsim.NEMOUtils;
import org.matsim.api.core.v01.Id;
import org.matsim.api.core.v01.Scenario;
import org.matsim.api.core.v01.network.Link;
import org.matsim.contrib.gtfs.RunGTFS2MATSim;
import org.matsim.core.config.Config;
import org.matsim.core.config.ConfigUtils;
import org.matsim.core.controler.Controler;
import org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting;
import org.matsim.core.controler.OutputDirectoryLogging;
import org.matsim.core.network.io.MatsimNetworkReader;
import org.matsim.core.network.io.NetworkWriter;
import org.matsim.core.scenario.ScenarioUtils;
import org.matsim.core.utils.geometry.CoordinateTransformation;
import org.matsim.core.utils.geometry.transformations.TransformationFactory;
import org.matsim.pt.transitSchedule.TransitScheduleWriterV1;
import org.matsim.pt.transitSchedule.api.TransitLine;
import org.matsim.pt.transitSchedule.api.TransitRoute;
import org.matsim.pt.transitSchedule.api.TransitRouteStop;
import org.matsim.pt.transitSchedule.api.TransitSchedule;
import org.matsim.pt.transitSchedule.api.TransitScheduleReader;
import org.matsim.pt.transitSchedule.api.TransitScheduleWriter;
import org.matsim.pt.transitSchedule.api.TransitStopFacility;
import org.matsim.pt.utils.CreatePseudoNetwork;
import org.matsim.pt.utils.CreateVehiclesForSchedule;
import org.matsim.vehicles.VehicleWriterV1;

import playground.vsp.andreas.osmBB.extended.TransitScheduleImpl;

/**
* @author ikaddoura
*/

public class GeneratePtAndRunNEMO {


	private static final Logger log = Logger.getLogger(GeneratePtAndRunNEMO.class);

	public static void main(String[] args) {
		
		GeneratePtAndRunNEMO runner = new GeneratePtAndRunNEMO();
		runner.run();
	}

	public void run() {
		
		// adjust these directories
		final String projectDirectory = "../shared-svn/projects/nemo_mercator/";
		final String gtfsZipFile = projectDirectory + "data/pt/google_transit_vrr_2018_05_11_corrected-v2.zip"; 
		final String directory = projectDirectory + "data/pt/corrected-gtfs-file-v2_ik/";
		
		// #######################################################
		// do not adjust the following lines (or talk to me, ik)

		final CoordinateTransformation ct = TransformationFactory.getCoordinateTransformation(TransformationFactory.WGS84, NEMOUtils.NEMO_EPSG);
		final LocalDate date = LocalDate.parse("2018-05-17");
		final String networkFileName = "tertiaryNemo_10112017_EPSG_25832_filteredcleaned_network.xml.gz";
		final String initialNetworkFile = projectDirectory + "data/matsim_input/"+networkFileName;
		final String networkFileNameAsPrefix = networkFileName.split(".xml")[0];
		
		// the data generated by the GTFS 2 MATSim converter
		final String networkGTFS = directory + networkFileNameAsPrefix+ "_GTFS.xml.gz";
		final String transitScheduleGTFS = directory + "transitSchedule_GTFS.xml.gz";
		final String transitVehiclesGTFS = directory + "transitVehicles_GTFS.xml.gz";
				
		// the adjusted / cleaned data to be used for the MATSim run
		final String networkGTFSadjusted = directory + networkFileNameAsPrefix+ "_GTFS_adjusted.xml.gz";
		final String transitScheduleGTFSadjusted = directory + "transitSchedule_GTFS_adjusted.xml.gz";
		final String outputDirectoryRun = directory + "pt-visualization/";
		
		OutputDirectoryLogging.catchLogEntries();
		try {
			OutputDirectoryLogging.initLoggingWithOutputDirectory(directory);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		log.info("GTFS zip file: " + gtfsZipFile);
		log.info("Network file: " + initialNetworkFile);
		log.info("Output directory: " + directory);
		
		{

			//Convert GTFS
			RunGTFS2MATSim.convertGtfs(gtfsZipFile, transitScheduleGTFS, date, ct, false);
			
			//Parse the schedule again
			Scenario scenario = ScenarioUtils.createScenario(ConfigUtils.createConfig());
			new TransitScheduleReader(scenario).readFile(transitScheduleGTFS);
			
			//if neccessary, parse in an existing network file here:
			new MatsimNetworkReader(scenario.getNetwork()).readFile(initialNetworkFile);
			
			//Create a network around the schedule
			new CreatePseudoNetwork(scenario.getTransitSchedule(),scenario.getNetwork(),NEMOUtils.TRANSIT_NETWORK_PREFIX).createNetwork();
			
			//Create simple transit vehicles
			new CreateVehiclesForSchedule(scenario.getTransitSchedule(), scenario.getTransitVehicles()).run();
			
			//Write out network, vehicles and schedule
			new NetworkWriter(scenario.getNetwork()).write(networkGTFS);
			new TransitScheduleWriter(scenario.getTransitSchedule()).writeFile(transitScheduleGTFS);
			new VehicleWriterV1(scenario.getTransitVehicles()).writeFile(transitVehiclesGTFS);
		}
		
		{
			Config config = ConfigUtils.createConfig();
			
			config.plans().setInputFile(null);
			config.network().setInputFile(networkGTFS);
			config.transit().setUseTransit(true);
			config.transit().setTransitScheduleFile(transitScheduleGTFS);
			config.transit().setVehiclesFile(transitVehiclesGTFS);
			
			Scenario scenario = ScenarioUtils.loadScenario(config);
			
			// correct network
			
			for (Link link : scenario.getNetwork().getLinks().values()) {
				
				if (link.getLength() > 0 && link.getLength() < Double.POSITIVE_INFINITY) {
					// ok
				} else {
					log.warn("Link length is " + link.getLength() + ". Adjust link length for link " + link.getId());
					link.setLength(1.234);
				}
			}
			
			// correct schedule

			List<Id<TransitStopFacility>> wrongStopIDs = new ArrayList<>();
			List<Id<TransitLine>> linesWithWrongStopIDs = new ArrayList<>();

			for (TransitStopFacility stop : scenario.getTransitSchedule().getFacilities().values()) {
				
				if (stop.getCoord().getX() > Double.NEGATIVE_INFINITY && stop.getCoord().getX() < Double.POSITIVE_INFINITY && 
						stop.getCoord().getY() > Double.NEGATIVE_INFINITY && stop.getCoord().getY() < Double.POSITIVE_INFINITY) {
					// probably ok
					
				} else {
					log.warn("Transit stop coordinate is " + stop.getCoord().toString() + ". Adding stop " + stop.getId() + " / " + stop.getName() + " to the list of wrong stops...");
					wrongStopIDs.add(stop.getId());
				}
			}
			
			// get lines for these stops
			for (Id<TransitStopFacility> id : wrongStopIDs) {
				for (TransitLine line : scenario.getTransitSchedule().getTransitLines().values()) {
					for (TransitRoute route : line.getRoutes().values()) {
						for (TransitRouteStop stop : route.getStops()) {
							if (stop.getStopFacility().getId().toString().equals(id.toString())) {
								linesWithWrongStopIDs.add(line.getId());
							}
						}
					}
				}
			}
					
			TransitSchedule tS = makeTransitScheduleModifiable(scenario.getTransitSchedule());
			
			// remove stops
			for (Id<TransitStopFacility> id : wrongStopIDs) {
				log.warn("Removing stop Id " + id);
				tS.getFacilities().remove(id);
			}
			
			// remove lines
			for (Id<TransitLine> id : linesWithWrongStopIDs) {
				log.warn("Removing transit line " + id);
				tS.getTransitLines().remove(id);
			}
			
			NetworkWriter writer = new NetworkWriter(scenario.getNetwork());
			writer.write(networkGTFSadjusted);
			
			TransitScheduleWriterV1 tSWriter = new TransitScheduleWriterV1(tS);
			tSWriter.write(transitScheduleGTFSadjusted);
				
		}
		
		{
			Config config = ConfigUtils.createConfig();
			
			config.controler().setOverwriteFileSetting(OverwriteFileSetting.failIfDirectoryExists);
			config.controler().setOutputDirectory(outputDirectoryRun);
			config.controler().setRunId("nemo-pt-visualization");
			config.controler().setFirstIteration(0);
			config.controler().setLastIteration(0);
			
			config.qsim().setEndTime(24 * 3600.);
			config.qsim().setStartTime(0.);
			
			config.plans().setInputFile(null);
			config.network().setInputFile(networkGTFSadjusted);
			config.transit().setUseTransit(true);
			config.transit().setTransitScheduleFile(transitScheduleGTFSadjusted);
			config.transit().setVehiclesFile(transitVehiclesGTFS);
			
			Scenario scenario = ScenarioUtils.loadScenario(config);
			Controler controler = new Controler(scenario);
			controler.run();
		
			log.info("Done.");
		}
		
	}
	
	private static TransitSchedule makeTransitScheduleModifiable(TransitSchedule transitSchedule){
		TransitSchedule tS = new TransitScheduleImpl(transitSchedule.getFactory());
		
		for (TransitStopFacility stop : transitSchedule.getFacilities().values()) {
			tS.addStopFacility(stop);			
		}
		
		for (TransitLine line : transitSchedule.getTransitLines().values()) {
			tS.addTransitLine(line);
		}
		
		return tS;
	}

}

